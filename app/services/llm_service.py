from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Any


class LLMService(ABC):
    """
    Abstract base class for LLM (Large Language Model) services.
    This defines the interface that all LLM implementations must follow.
    """

    @abstractmethod
    def enhance_prompt(self, prompt: str) -> str:
        """
        Enhances a user prompt with additional details to improve image generation quality.

        Args:
            prompt (str): The original user prompt

        Returns:
            str: Enhanced prompt with additional details
        """
        pass

    @abstractmethod
    def generate_description(self, prompt: str, context: Optional[List[Dict[str, Any]]] = None) -> str:
        """
        Generates a detailed description based on the user prompt and optional context.

        Args:
            prompt (str): The user prompt
            context (Optional[List[Dict[str, Any]]]): Optional context from previous interactions

        Returns:
            str: Generated detailed description
        """
        pass

    @abstractmethod
    def validate_output(self, generated_text: str) -> bool:
        """
        Validates the generated text to ensure it meets quality standards.

        Args:
            generated_text (str): The text generated by the LLM

        Returns:
            bool: True if the text passes validation, False otherwise
        """
        pass
